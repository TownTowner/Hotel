version: '3.4'
name: hotel-compose-d # doesn't work here when using vs to run  Docker Compose

services:
  # consul-agent-1: &consul-agent
  #   image: hashicorp/consul:1.16.1
  #   container_name: consul-agent-1
  #   networks: 
  #     - network
  #   command: "agent -retry-join consul-server-bootstrap -client 0.0.0.0"

  # consul-agent-2:
  #   container_name: consul-agent-2
  #   <<: *consul-agent

  # Consul Server node1
  consul-server-1: &consul-server
    container_name: consul-server-1
    image: hashicorp/consul:1.16.1
    # restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8500/ui/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - consul-data-1:/consul
      #- ./consul/config:/consul/config
      #- ./consul/data:/consul/data
      #- ./consul/logs:/consul/logs
    #command: consul agent -server -ui -bootstrap-expect=3 -bind='{{ GetPrivateIP }}' -client=0.0.0.0 -retry-join=consul-server-0
    command:  consul agent -server -ui -bootstrap-expect=3 -bind='{{ GetPrivateIP }}' -client=0.0.0.0 -data-dir=/consul/data -config-dir=/consul/config -retry-join=consul-server-0
    #-bootstrap-expectï¼šmust be 3 or 5 (odd number)
    # ports:
    #   - "8500:8500" # HTTP API and Web UI
    #   - "8600:8600/udp" # DNS interface
    #   - "8300:8300"  # Server RPC
    #   - "8301:8301"  # Serf LAN
    #   - "8302:8302"  # Serf WAN
    networks:
      - hotelnetwork

  # Consul Server node2
  consul-server-2:
    container_name: consul-server-2
    <<: *consul-server
    volumes:
      - consul-data-2:/consul

  # Consul Server ui start node
  consul-server-0:
    container_name: consul-server-0
    <<: *consul-server
    ports:
      - "8500:8500" # HTTP API and Web UI
      - "8600:8600/udp" # DNS interface
      - "8300:8300"  # Server RPC
      - "8301:8301"  # Serf LAN
      - "8302:8302"  # Serf WAN
    command:  consul agent -server -ui -bootstrap-expect=3 -bind='{{ GetPrivateIP }}' -client=0.0.0.0 -data-dir=/consul/data -config-dir=/consul/config
    volumes:
      - consul-data-0:/consul

  # Ocelot API gateway
  ocelot-gateway:
    # image: ocelotapi/ocelot:18.0.0
    build: ./Hotel.Gateway
    image: hotel-ocelot-gateway:1.0.0  # set image name and tag
    container_name: ocelot-gateway
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Consul__Address=http://consul-server-0:8500  # direct to Consul client
    depends_on:
      - consul-server-0
    volumes:
      - ./Hotel.Gateway/OcelotConfig:/app/config  # mount Ocelot config
    networks:
      - hotelnetwork

  # Nginx
  nginx:
    image: nginx:1.25
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ocelot-gateway
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d  # mount Nginx config
      # - ./ssl-certs:/etc/ssl/certs  # SSL cert(optional)
    networks:
      - hotelnetwork

  #---------------ELK-Kibana-------------
  elasticsearch:
    container_name: elk-els
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/datafile
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      #- xpack.security.enabled=true
      #- xpack.security.transport.ssl.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      #- ELASTIC_PASSWORD=elastic #password
    networks:
      - hotelnetwork

  kibana:
    container_name: elk-kibana
    image: docker.elastic.co/kibana/kibana:${ES_KIBANA_VERSION}
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - i18n.locale=zh-CN
      #- ELASTICSEARCH_USERNAME=elastic
      #- ELASTICSEARCH_PASSWORD=elastic #elastic password
    networks:
      - hotelnetwork
  #---------------ELK-Kibana-------------

  hotel:
    image: ${DOCKER_REGISTRY-}hotel
    container_name: hotel
    ports:
      - 9527:80
    build:
      context: .
      dockerfile: Hotel/Dockerfile
      #args: 
      #  - "--network=host"
    depends_on:
       kibana:
         condition: service_started
         #required: false # not implementation for now
         #sw-oap:
         #  condition: service_healthy
         #required: false # not implementation for now
       consul-server-0: 
         condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HOSTINGSTARTUPASSEMBLIES=SkyAPM.Agent.AspNetCore
    #network_mode: host
    #dns: 8.8.8.8 # single string value
    #dns: # list 
    # - 8.8.8.8
    # - 1.1.1.1
    networks:
      - hotelnetwork

  ##---------------SkyWalking-------------
  ##https://github.com/apache/skywalking/blob/master/docker/docker-compose.yml
  #sw-elasticsearch:
  #  image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
  #  container_name: sw-elasticsearch
  #  ports:
  #    - "9201:9200"
  #  healthcheck:
  #    test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ] #image inner cmd using port 9200
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 10s
  #  environment:
  #    - discovery.type=single-node
  #    - bootstrap.memory_lock=true
  #    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #  ulimits:
  #    memlock:
  #      soft: -1
  #      hard: -1
  #  networks:
  #    - hotelnetwork

  #sw-oap:
  #  image: ${OAP_IMAGE}
  #  container_name: sw-oap
  #  depends_on:
  #    sw-elasticsearch:
  #      condition: service_healthy
  #  links:
  #    - sw-elasticsearch
  #  ports:
  #    - "11800:11800"
  #    - "12800:12800"
  #  healthcheck:
  #    ##https://github.com/apache/skywalking/blob/master/test/e2e-v2/script/docker-compose/base-compose.yml
  #    #test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/11800"]
  #    test: [ "CMD-SHELL", "/skywalking/bin/swctl ch" ]
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 10s
  #  #volumes:
  #  #  - ./../prepare/setup-oap/download-mysql.sh:/download-mysql.sh
  #  #  - ./../prepare/setup-oap/log4j2.xml:/skywalking/config/log4j2.xml
  #  environment:
  #    SW_STORAGE: elasticsearch 
  #    SW_STORAGE_ES_CLUSTER_NODES: sw-elasticsearch:9200
  #    SW_HEALTH_CHECKER: default
  #    SW_TELEMETRY: prometheus
  #    JAVA_OPTS: "-Xms2048m -Xmx2048m"
  #  networks:
  #    - hotelnetwork

  #sw-ui:
  #  image: ${UI_IMAGE}
  #  container_name: sw-ui
  #  depends_on:
  #    sw-oap:
  #      condition: service_healthy
  #  links:
  #    - sw-oap
  #  ports:
  #    - "8087:8080"
  #  environment:
  #    SW_OAP_ADDRESS: http://sw-oap:12800
  #    SW_ZIPKIN_ADDRESS: http://sw-oap:9412
  #  networks:
  #    - hotelnetwork
  ##---------------SkyWalking-------------

  #---------------Prometheus+Grafana-------------
  pg-prometheus:
    image: docker.io/bitnami/prometheus:2
    container_name: pg-prometheus
    ports:
      - '9090:9090'
    #configs:
    #  - source: prometheus_config
    #    target: /opt/bitnami/prometheus/conf/prometheus.yml
    depends_on:
      - hotel
    volumes:
      - prometheus-data:/opt/bitnami/prometheus/data
      - ./prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    networks:
      - hotelnetwork
  pg-cadvisor:
    #image: gcr.io/cadvisor/cadvisor:latest
    image: gcmirrors/cadvisor:latest #https://mirrors.kb.cx/
    container_name: pg-cadvisor
    ports:
      - 8077:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - hotelnetwork
  pg-grafana:
    image : docker.io/bitnami/grafana:10
    container_name: pg-grafana
    depends_on: 
      - pg-prometheus
    ports:
      - "3003:3000"
    environment:
      - 'GF_SECURITY_ADMIN_PASSWORD=bitnami'
      - 'GF_USERS_ALLOW_SIGN_UP=false'
    volumes:
      - grafana-data:/opt/bitnami/grafana/data
      # optional config : https://github.com/djluck/prometheus-net.DotNetRuntime/blob/master/examples/docker-compose.yml#L42
      #- ./grafana/data/:/var/lib/grafana
      #- ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - hotelnetwork
  #---------------Prometheus+Grafana-------------

configs:
  prometheus_config:
    file: ./prometheus.yml

networks:
  hotelnetwork:
    driver: bridge
  #host:
  #  name: host
  #  external: true
  
  
volumes:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  consul-data-1:
    driver: local  
  consul-data-2:
    driver: local    
  consul-data-0:
    driver: local    
    